<?php
/**
 * AssociationModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  SayWhenOrderlines
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SayWhen Orderlines
 *
 * SayWhen Orderlines API Documentation
 *
 * OpenAPI spec version: 1.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SayWhenOrderlines\Model;

use \ArrayAccess;

/**
 * AssociationModel Class Doc Comment
 *
 * @category    Class */
/**
 * @package     SayWhenOrderlines
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AssociationModel implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AssociationModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'reference' => 'string',
        'back_office_partner_id' => 'string',
        'front_office_partner_id' => 'string',
        'orderline_id' => 'int',
        'survey_id' => 'int',
        'survey_name' => 'string',
        'questions_and_answers' => 'string',
        'field_and_values' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'reference' => 'reference',
        'back_office_partner_id' => 'back_office_partner_id',
        'front_office_partner_id' => 'front_office_partner_id',
        'orderline_id' => 'orderline_id',
        'survey_id' => 'survey_id',
        'survey_name' => 'survey_name',
        'questions_and_answers' => 'questions_and_answers',
        'field_and_values' => 'field_and_values'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'reference' => 'setReference',
        'back_office_partner_id' => 'setBackOfficePartnerId',
        'front_office_partner_id' => 'setFrontOfficePartnerId',
        'orderline_id' => 'setOrderlineId',
        'survey_id' => 'setSurveyId',
        'survey_name' => 'setSurveyName',
        'questions_and_answers' => 'setQuestionsAndAnswers',
        'field_and_values' => 'setFieldAndValues'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'reference' => 'getReference',
        'back_office_partner_id' => 'getBackOfficePartnerId',
        'front_office_partner_id' => 'getFrontOfficePartnerId',
        'orderline_id' => 'getOrderlineId',
        'survey_id' => 'getSurveyId',
        'survey_name' => 'getSurveyName',
        'questions_and_answers' => 'getQuestionsAndAnswers',
        'field_and_values' => 'getFieldAndValues'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['back_office_partner_id'] = isset($data['back_office_partner_id']) ? $data['back_office_partner_id'] : null;
        $this->container['front_office_partner_id'] = isset($data['front_office_partner_id']) ? $data['front_office_partner_id'] : null;
        $this->container['orderline_id'] = isset($data['orderline_id']) ? $data['orderline_id'] : null;
        $this->container['survey_id'] = isset($data['survey_id']) ? $data['survey_id'] : null;
        $this->container['survey_name'] = isset($data['survey_name']) ? $data['survey_name'] : null;
        $this->container['questions_and_answers'] = isset($data['questions_and_answers']) ? $data['questions_and_answers'] : null;
        $this->container['field_and_values'] = isset($data['field_and_values']) ? $data['field_and_values'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Identifier
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets reference
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     * @param string $reference Reference
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets back_office_partner_id
     * @return string
     */
    public function getBackOfficePartnerId()
    {
        return $this->container['back_office_partner_id'];
    }

    /**
     * Sets back_office_partner_id
     * @param string $back_office_partner_id SayWhen BackOffice Partner ID
     * @return $this
     */
    public function setBackOfficePartnerId($back_office_partner_id)
    {
        $this->container['back_office_partner_id'] = $back_office_partner_id;

        return $this;
    }

    /**
     * Gets front_office_partner_id
     * @return string
     */
    public function getFrontOfficePartnerId()
    {
        return $this->container['front_office_partner_id'];
    }

    /**
     * Sets front_office_partner_id
     * @param string $front_office_partner_id SayWhen FrontOffice Partner ID
     * @return $this
     */
    public function setFrontOfficePartnerId($front_office_partner_id)
    {
        $this->container['front_office_partner_id'] = $front_office_partner_id;

        return $this;
    }

    /**
     * Gets orderline_id
     * @return int
     */
    public function getOrderlineId()
    {
        return $this->container['orderline_id'];
    }

    /**
     * Sets orderline_id
     * @param int $orderline_id Orderline ID
     * @return $this
     */
    public function setOrderlineId($orderline_id)
    {
        $this->container['orderline_id'] = $orderline_id;

        return $this;
    }

    /**
     * Gets survey_id
     * @return int
     */
    public function getSurveyId()
    {
        return $this->container['survey_id'];
    }

    /**
     * Sets survey_id
     * @param int $survey_id SayWhen Survey Name
     * @return $this
     */
    public function setSurveyId($survey_id)
    {
        $this->container['survey_id'] = $survey_id;

        return $this;
    }

    /**
     * Gets survey_name
     * @return string
     */
    public function getSurveyName()
    {
        return $this->container['survey_name'];
    }

    /**
     * Sets survey_name
     * @param string $survey_name SayWhen Survey Name
     * @return $this
     */
    public function setSurveyName($survey_name)
    {
        $this->container['survey_name'] = $survey_name;

        return $this;
    }

    /**
     * Gets questions_and_answers
     * @return string
     */
    public function getQuestionsAndAnswers()
    {
        return $this->container['questions_and_answers'];
    }

    /**
     * Sets questions_and_answers
     * @param string $questions_and_answers Questions and Answers JSON Object
     * @return $this
     */
    public function setQuestionsAndAnswers($questions_and_answers)
    {
        $this->container['questions_and_answers'] = $questions_and_answers;

        return $this;
    }

    /**
     * Gets field_and_values
     * @return string
     */
    public function getFieldAndValues()
    {
        return $this->container['field_and_values'];
    }

    /**
     * Sets field_and_values
     * @param string $field_and_values Field & Values JSON Object
     * @return $this
     */
    public function setFieldAndValues($field_and_values)
    {
        $this->container['field_and_values'] = $field_and_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\SayWhenOrderlines\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\SayWhenOrderlines\ObjectSerializer::sanitizeForSerialization($this));
    }
}
